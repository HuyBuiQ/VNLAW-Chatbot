import streamlit as st
from dotenv import load_dotenv
import os
import openai
import time
import json
from langchain_community.vectorstores import Chroma
from langchain_openai import OpenAIEmbeddings
from langchain_openai import ChatOpenAI
from langchain_core.prompts import ChatPromptTemplate
from streamlit_cookies_manager import EncryptedCookieManager

# L·∫•y API key v√† password
load_dotenv()
openai.api_key = os.environ.get('OPENAI_API_KEY')
COOKIE_PASSWORD = os.environ.get("COOKIE_PASSWORD")

if not openai.api_key or not COOKIE_PASSWORD:
    st.error("Ch∆∞a t√¨m th·∫•y OPENAI_API_KEY ho·∫∑c COOKIE_PASSWORD! Vui l√≤ng th√™m v√†o t·ªáp .env")
    st.stop()

CHROMA_PATH = "chroma"

PROMPT_TEMPLATE = """
B·∫°n l√† m·ªôt Tr·ª£ l√Ω Tra c·ª©u Ph√°p l√Ω kh√°ch quan.
Nhi·ªám v·ª• c·ªßa b·∫°n l√† tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng d·ª±a DUY NH·∫§T v√†o c√°c ƒëi·ªÅu lu·∫≠t t·ª´ {law_name} ƒë∆∞·ª£c cung c·∫•p trong ph·∫ßn 'CƒÇN C·ª® PH√ÅP L√ù'.
B·∫°n ph·∫£i tu√¢n th·ªß c√°c h∆∞·ªõng d·∫´n sau:
1.  ƒê·ªçc k·ªπ c√¢u h·ªèi v√† c√°c ƒëi·ªÅu lu·∫≠t.
2.  C√¢u tr·∫£ l·ªùi ph·∫£i ch√≠nh x√°c, ƒë·∫ßy ƒë·ªß, kh√°ch quan, v√† chi ti·∫øt.
3.  H√£y b·∫Øt ƒë·∫ßu c√¢u tr·∫£ l·ªùi b·∫±ng c√°ch tr√≠ch d·∫´n ƒëi·ªÅu kho·∫£n (v√≠ d·ª•: "Theo ƒêi·ªÅu [s·ªë] c·ªßa {law_name}...").
4.  Tuy·ªát ƒë·ªëi KH√îNG th√™m th√¥ng tin n√†o b√™n ngo√†i 'CƒÇN C·ª® PH√ÅP L√ù'.
5.  N·∫øu kh√¥ng t√¨m th·∫•y th√¥ng tin, h√£y tr·∫£ l·ªùi: "D·ª±a tr√™n c√°c th√¥ng tin ƒë∆∞·ª£c cung c·∫•p, t√¥i kh√¥ng t√¨m th·∫•y ƒëi·ªÅu lu·∫≠t quy ƒë·ªãnh v·ªÅ v·∫•n ƒë·ªÅ n√†y."


CƒÇN C·ª® PH√ÅP L√ù (t·ª´ {law_name}):
{context}
---
C√ÇU H·ªéI: {question}
TR·∫¢ L·ªúI (d·ª±a v√†o {law_name}):
"""


def get_law_name_from_source(source_path: str) -> str:
    filename = os.path.basename(source_path)
    if "Bo_Luat_Hinh_Su_Hop_Nhat" in filename:
        return "B·ªô lu·∫≠t H√¨nh s·ª± 2025"
    elif "luat_dan_su" in filename:
        return "B·ªô lu·∫≠t D√¢n s·ª± 2015"
    elif "luat_dat_dai" in filename:
        return "B·ªô lu·∫≠t ƒê·∫•t ƒëai 2024"
    return "VƒÉn b·∫£n ph√°p l√Ω ƒë∆∞·ª£c cung c·∫•p"


@st.cache_resource
def load_chroma_db():
    embedding_function = OpenAIEmbeddings()
    db = Chroma(persist_directory=CHROMA_PATH, embedding_function=embedding_function)
    return db


@st.cache_resource
def load_chat_model():
    model = ChatOpenAI(model="gpt-3.5-turbo")
    return model


db = load_chroma_db()
model = load_chat_model()


def get_rag_response(query_text: str):
    results = db.similarity_search_with_relevance_scores(query_text, k=5)

    if not results or results[0][1] < 0.7:
        return "D·ª±a tr√™n c√°c th√¥ng tin ƒë∆∞·ª£c cung c·∫•p, t√¥i kh√¥ng t√¨m th·∫•y ƒëi·ªÅu lu·∫≠t quy ƒë·ªãnh v·ªÅ v·∫•n ƒë·ªÅ n√†y.", []

    context_text = "\n\n---\n\n".join([doc.page_content for doc, _score in results])
    source_file_path = results[0][0].metadata.get("source", "")
    law_name = get_law_name_from_source(source_file_path)

    prompt_template = ChatPromptTemplate.from_template(PROMPT_TEMPLATE)
    prompt = prompt_template.format(
        context=context_text,
        question=query_text,
        law_name=law_name
    )
    # Fetch cho ChatGPT API
    response_ai_message = model.invoke(prompt)
    response_text = response_ai_message.content

    sources = [get_law_name_from_source(doc.metadata.get("source", "")) for doc, _score in results]
    unique_sources = list(set(sources))

    return response_text, unique_sources


# Config trang

st.set_page_config(page_title="Chatbot Ph√°p l√Ω", page_icon="‚öñÔ∏è", layout="wide")

# Kh·ªüi t·∫°o tr√¨nh qu·∫£n l√Ω cookie
cookies = EncryptedCookieManager(
    password=COOKIE_PASSWORD,
    prefix="luat_chatbot/cookie/",
)
if not cookies.ready:
    st.stop()


# T·∫£i t·∫•t c·∫£ c√°c cu·ªôc h·ªôi tho·∫°i t·ª´ cookie v√†o session_state khi b·∫Øt ƒë·∫ßu
if "chat_sessions" not in st.session_state:
    cookie_data = cookies.get("chat_sessions")
    if cookie_data:
        try:
            st.session_state.chat_sessions = json.loads(cookie_data)
        except json.JSONDecodeError:
            # N·∫øu cookie b·ªã h·ªèng, b·∫Øt ƒë·∫ßu l·∫°i v·ªõi dict r·ªóng
            st.session_state.chat_sessions = {}
    else:
        # N·∫øu kh√¥ng c√≥ cookie, b·∫Øt ƒë·∫ßu v·ªõi dict r·ªóng
        st.session_state.chat_sessions = {}

# X√°c ƒë·ªãnh cu·ªôc h·ªôi tho·∫°i n√†o ƒëang ho·∫°t ƒë·ªông
if "active_chat_id" not in st.session_state:
    st.session_state.active_chat_id = None


# H√†m l∆∞u cookie
def save_sessions_to_cookie():
    # Convert dict to JSON
    json_data = json.dumps(st.session_state.chat_sessions)
    cookies["chat_sessions"] = json_data


# UI Sidebar

with st.sidebar:
    st.title("‚öñÔ∏è Chatbot Lu·∫≠t")


    if st.button("T·∫°o cu·ªôc tr√≤ chuy·ªán m·ªõi", use_container_width=True):
        st.session_state.active_chat_id = None
        st.rerun()

    st.divider()

    # Hi·ªÉn th·ªã l·ªãch s·ª≠ truy v·∫•n
    st.subheader("L·ªãch s·ª≠ truy v·∫•n")
    sorted_chat_ids = sorted(st.session_state.chat_sessions.keys(), reverse=True)

    for chat_id in sorted_chat_ids:
        chat_data = st.session_state.chat_sessions[chat_id]


        if st.button(chat_data.get("title", "Cu·ªôc tr√≤ chuy·ªán kh√¥ng t√™n"), use_container_width=True, type="secondary"):
            st.session_state.active_chat_id = chat_id
            st.rerun()


    st.divider()
    if st.button("üóëÔ∏è X√≥a l·ªãch s·ª≠", use_container_width=True, type="secondary"):
        st.session_state.chat_sessions = {}
        st.session_state.active_chat_id = None
        # [S·ª¨A] S·ª≠ d·ª•ng 'del' ƒë·ªÉ x√≥a cookie, thay v√¨ l∆∞u ƒë√®
        if "chat_sessions" in cookies:
            del cookies["chat_sessions"]
        st.rerun()



# Ki·ªÉm tra xem c√≥ cu·ªôc h·ªôi tho·∫°i n√†o ƒëang ho·∫°t ƒë·ªông kh√¥ng
active_id = st.session_state.active_chat_id

if active_id is None:
    # ƒê√¢y l√† "Trang tr·∫Øng" khi m·ªõi v√†o ho·∫∑c nh·∫•n "T·∫°o m·ªõi"
    st.info("B·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán m·ªõi b·∫±ng c√°ch ƒë·∫∑t c√¢u h·ªèi c·ªßa b·∫°n b√™n d∆∞·ªõi.")

else:

    # L·∫•y l·ªãch s·ª≠ tin nh·∫Øn c·ªßa cu·ªôc h·ªôi tho·∫°i ƒëang ho·∫°t ƒë·ªông
    messages = st.session_state.chat_sessions[active_id].get("messages", [])

    # Show c√°c tin nh·∫Øn ƒë√£ c√≥
    for message in messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])


# X·ª≠ l√Ω input

if prompt := st.chat_input("B·∫°n mu·ªën h·ªèi g√¨ v·ªÅ lu·∫≠t?"):
    if active_id is None:
        # T·∫°o m·ªôt ID m·ªõi
        active_id = f"chat_{int(time.time())}"
        # T·∫°o ti√™u ƒë·ªÅ (l·∫•y 40 k√Ω t·ª± ƒë·∫ßu c·ªßa c√¢u h·ªèi)
        new_title = prompt[:40] + "..."
        # T·∫°o cu·ªôc h·ªôi tho·∫°i m·ªõi
        st.session_state.chat_sessions[active_id] = {
            "title": new_title,
            "messages": []
        }
        # ƒê·∫∑t n√≥ l√†m cu·ªôc h·ªôi tho·∫°i ho·∫°t ƒë·ªông
        st.session_state.active_chat_id = active_id

    # th√™m c√¢u h·ªèi v√†o l·ªãch s·ª≠
    st.session_state.chat_sessions[active_id]["messages"].append(
        {"role": "user", "content": prompt}
    )

    # Hi·ªÉn th·ªã c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng ngay l·∫≠p t·ª©c
    with st.chat_message("user"):
        st.markdown(prompt)

    # L·∫•y c√¢u tr·∫£ l·ªùi t·ª´ RAG
    with st.chat_message("assistant"):
        with st.spinner("ƒêang tra c·ª©u v√† t·ªïng h·ª£p..."):
            response, sources = get_rag_response(prompt)

            if sources:
                response_with_sources = f"{response}\n\n*Ngu·ªìn tham kh·∫£o: {', '.join(sources)}*"
            else:
                response_with_sources = response

            st.markdown(response_with_sources)

    # Th√™m c√¢u tr·∫£ l·ªùi c·ªßa AI v√†o l·ªãch s·ª≠
    st.session_state.chat_sessions[active_id]["messages"].append(
        {"role": "assistant", "content": response_with_sources}
    )

    # L∆∞u t·∫•t c·∫£ thay ƒë·ªïi v√†o cookie v√† t·∫£i l·∫°i trang
    save_sessions_to_cookie()
    st.rerun()